# Load required libraries
library(shiny)
library(bs4Dash)
library(plotly)
library(DT)
library(lubridate)
library(dplyr)
library(bslib)
library(tidyr)
library(thematic)
library(ggplot2)

# Load Data dari CSV
data_keluhan <- tryCatch({
  read.csv("data_keluhan_dnd.csv")
}, error = function(e) {
  # Jika gagal load, tampilkan pesan error dan gunakan data dummy sebagai pengganti
  message("Gagal memuat data: ", e)
  NULL   
})

# Data preprocessing
if (!is.null(data_keluhan)) {
  data_keluhan$Tanggal <- as.Date(data_keluhan$Tanggal)
  data_keluhan$Bulan <- format(data_keluhan$Tanggal, "%B")
  data_keluhan$Bulan <- factor(data_keluhan$Bulan, levels = month.name)  # Urutan bulan
}

# Header
header <- dashboardHeader(
  title = "Dashboard Kinerja Agen",
  skin = "light"
)

# Sidebar
sidebar <- dashboardSidebar(
  skin = "light",
  sidebarMenu(
    menuItem("Overview", tabName = "overview", icon = icon("chart-line")),
    menuItem("Complaints Analytics", tabName = "complaints_analytics", icon = icon("chart-pie")),
    menuItem("SLA Monitoring", tabName = "sla_monitoring", icon = icon("tachometer-alt")),
    menuItem("Agent Performance", tabName = "agent_performance", icon = icon("users")),
    menuItem("Reports", tabName = "reports", icon = icon("file-alt"))
  )
)

# Body
body <- dashboardBody(
  # Custom styling
  tags$head(
    tags$style(HTML("
      body {background-color: #FFEBEE;}
      .box {background-color: #FFCDD2; border-radius: 10px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);}
      .main-sidebar {background-color: #F8BBD0;}
      .main-header .navbar {background-color: #F48FB1;}
      .value-box {background-color: #E1BEE7; color: #333333; border-radius: 10px;}
    "))
  ),
  
  tabItems(
    # Tab 1: Overview
    tabItem(
      tabName = "overview",
      fluidRow(
        box(
          title = "Welcome!",
          status = "primary",
          solidHeader = TRUE,
          width = 12,
          align = "center",
          div(class = "welcome-box",
              span(class="welcome-icon", icon("smile-wink")),
              "Selamat datang di dashboard customer service! Gunakan menu di samping untuk navigasi."
          )
        )
      ),
      fluidRow(
        valueBoxOutput("total_keluhan_box", width = 4),
        valueBoxOutput("penyelesaian_keluhan_box", width = 4),
        valueBoxOutput("waktu_respon_box", width = 4)
      ),
      fluidRow(
        valueBoxOutput("sla_compliance_box", width = 4),
        valueBoxOutput("csat_score_box", width = 4),
        valueBoxOutput("nps_score_box", width = 4)
      ),
      fluidRow(
        box(
          title = "Grafik Tren Keluhan Bulanan per Kategori",
          elevation = 4,
          plotlyOutput("grafik_tren_keluhan"),
          width = 12
        )
      )
    ),
    
    # Tab 2: Complaints Analytics
    tabItem(
      tabName = "complaints_analytics",
      fluidRow(
        box(
          title = "Distribusi Kategori Keluhan",
          elevation = 4,
          plotlyOutput("pie_chart_keluhan"),
          width = 6
        ),
        box(
          title = "Frekuensi Keluhan per Produk",
          plotlyOutput("bar_chart_produk"),
          width = 6
        )
      ),
      fluidRow(
        box(
          title = "Tabel Keluhan",
          dataTableOutput("summary_report"),
          width = 12
        ),
        downloadButton("download_report", "Download Report")
      )
    ),
    
    # Tab 3: SLA Monitoring
    tabItem(
      tabName = "sla_monitoring",
      fluidRow(
        box(
          title = "Keluhan Hampir Melampaui SLA",
          dataTableOutput("keluhan_hampir_sla"),
          width = 12
        )
      )
    ),
    
    # Tab 4: Agent Performance
    tabItem(
      tabName = "agent_performance",
      fluidRow(
        box(
          title = "Kinerja Agen",
          elevation = 4,
          dataTableOutput("performance_agen"),
          width = 12
        )
      )
    )
  )
)

# UI
ui <- dashboardPage(
  header = header,
  sidebar = sidebar,
  body = body
)

# Server
server <- function(input, output, session) {
  # Load data keluhan dari CSV sebagai reactive value
  complaints_data <- reactiveVal(data_keluhan)
  
  observe({
    # Summary Data
    total_keluhan <- nrow(complaints_data())
    rata2_penyelesaian_keluhan <- mean(complaints_data()$Persentase_Penyelesaian, na.rm = TRUE)
    rata2_waktu_respon <- mean(complaints_data()$Waktu_Respon, na.rm = TRUE)
    rata2_sla <- mean(complaints_data()$Persentase_Penyelesaian, na.rm = TRUE)
    rata2_csat <- mean(complaints_data()$Rating_CSAT, na.rm = TRUE)
    rata2_nps <- mean(complaints_data()$NPS_Score, na.rm = TRUE)
    
    # Value Boxes
    output$total_keluhan_box <- renderValueBox({
      valueBox(value = total_keluhan, subtitle = "Total Keluhan", color = "warning", icon = icon("exclamation-triangle"))
    })
    
    output$penyelesaian_keluhan_box <- renderValueBox({
      valueBox(value = paste0(round(rata2_penyelesaian_keluhan * 100), "%"), subtitle = "Tingkat Penyelesaian", color = "success", icon = icon("check-circle"))
    })
    
    output$waktu_respon_box <- renderValueBox({
      valueBox(value = round(rata2_waktu_respon, 2), subtitle = "Waktu Respon Rata-rata (Jam)", color = "primary", icon = icon("clock"))
    })
    
    output$sla_compliance_box <- renderValueBox({
      valueBox(value = paste0(round(rata2_sla * 100), "%"), subtitle = "SLA Compliance", color = "purple", icon = icon("thumbs-up"))
    })
    
    output$csat_score_box <- renderValueBox({
      valueBox(value = round(rata2_csat, 1), subtitle = "CSAT Score", color = "info", icon = icon("smile"))
    })
    
    output$nps_score_box <- renderValueBox({
      valueBox(value = round(rata2_nps, 1), subtitle = "NPS Score", color = "danger", icon = icon("heart"))
    })
  })
  
  # Grafik Tren Keluhan Bulanan per Kategori
  output$grafik_tren_keluhan <- renderPlotly({
    data_tren <- complaints_data() %>%
      mutate(Bulan = format(as.Date(Tanggal), "%Y-%m")) %>%
      group_by(Bulan, Keluhan) %>%
      summarise(Jumlah_Keluhan = n(), .groups = 'drop') %>%
      pivot_wider(names_from = Keluhan, values_from = Jumlah_Keluhan, values_fill = 0)
    
    plot_ly(data = data_tren, x = ~Bulan, type = 'bar') %>%
      add_bars(y = ~`Kurir tidak ramah`, name = 'Kurir tidak ramah') %>%
      add_bars(y = ~`Pengemasan buruk`, name = 'Pengemasan buruk') %>%
      add_bars(y = ~`Pembayaran bermasalah`, name = 'Pembayaran bermasalah') %>%
      add_bars(y = ~`Pengiriman lambat`, name = 'Pengiriman lambat') %>%
      add_bars(y = ~`Layanan pelanggan buruk`, name = 'Layanan pelanggan buruk') %>%
      add_bars(y = ~`Produk rusak`, name = 'Produk rusak') %>%
      add_bars(y = ~`Produk tidak sesuai`, name = 'Produk tidak sesuai') %>%
      add_bars(y = ~`Salah kirim barang`, name = 'Salah kirim barang') %>%
      add_bars(y = ~`Komunikasi tidak jelas`, name = 'Komunikasi tidak jelas') %>%
      layout(title = "Grafik Tren Keluhan per Kategori", 
             xaxis = list(title = "Bulan"), 
             yaxis = list(title = "Jumlah Keluhan"), 
             barmode = 'group')
  })
  
  # Pie Chart Keluhan
  output$pie_chart_keluhan <- renderPlotly({
    data_pie <- complaints_data() %>%
      group_by(Keluhan) %>%
      summarise(Jumlah = n(), .groups = 'drop')
    
    plot_ly(data = data_pie, labels = ~Keluhan, values = ~Jumlah, type = 'pie') %>%
      layout(title = "Distribusi Kategori Keluhan")
  })
  

# Bar Chart Frekuensi Produk
output$bar_chart_produk <- renderPlotly({
  data_produk <- complaints_data() %>%
    group_by(Produk_Terkait) %>%
    summarise(Jumlah_Keluhan = n(), .groups = 'drop') %>%
    arrange(desc(Jumlah_Keluhan))
  
  plot_ly(data = data_produk, x = ~Produk_Terkait, y = ~Jumlah_Keluhan, type = 'bar') %>%
    layout(title = "Keluhan per Produk", xaxis = list(title = "Produk"), yaxis = list(title = "Jumlah Keluhan"))
})

# Download Report
output$download_report <- downloadHandler(
  filename = function() {
    paste("laporan_keluhan_", Sys.Date(), ".csv", sep = "")
  },
  content = function(file) {
    write.csv(complaints_data(), file, row.names = FALSE)
  }
)

# SLA Monitoring
output$keluhan_hampir_sla <- renderDataTable({
  datatable(
    complaints_data()[complaints_data()$Tanggal >= Sys.Date() - 3, ],
    options = list(pageLength = 5, dom = 'tip'),
    caption = "Keluhan yang mendekati SLA"
  )
})

# Kinerja Agen
output$performance_agen <- renderDataTable({
  agen_summary <- complaints_data() %>%
    group_by(Agen) %>%
    summarise(Keluhan_Terselesaikan = sum(Status_Keluhan == "Selesai", na.rm = TRUE))
  
  datatable(
    agen_summary,
    options = list(pageLength = 5, dom = 'tip'),
    caption = "Kinerja Penyelesaian Keluhan oleh Agen"
  )
})

# Laporan Summary
output$summary_report <- renderDataTable({
  datatable(complaints_data())
})
}

# Jalankan aplikasi
shinyApp(ui = ui, server = server)

    
